const express = require("express");
const Book = require("./models/book");
const mongoose = require("mongoose");

const app = express();
//!Middlewares

//? CONNECT TO MONGO DB
const PORT = 5000;
mongoose
  .connect(
    "mongodb+srv://onbonimos:hCggjjr9UXp22yjO@book.eyoiad8.mongodb.net/book-api?retryWrites=true&w=majority&appName=book"
  )
  .then(() => {
    console.log("Mongo DB connected");
  })
  .catch((e) => {
    console.log(e);
  });
app.use(express.json()); //pass json data
app.post("/api/v1/books", async (req, res) => {
  try {
    const { title, author, genre, publishedYear, isAvailable } = req.body;
    const existingBooks = await Book.findOne({ title, author });
    if (existingBooks) {
      return res.status(409).json({
        error: "Book already exist",
      });
    }
    const book = await Book.create({
      title,
      author,
      genre,
      publishedYear,
      isAvailable,
    });
    //send the response to the user
    res.status(201).json(book);
  } catch (error) {
    res.status(400).json({
      error: error.message,
    });
  }
});

//fetch all the book
app.get("/api/v1/books", async (req, res) => {
  try {
    const books = await Book.find();
    res.status(200).json(books);
  } catch (err) {
    res.status(500).json({
      error: err.message,
    });
  }
});

//fetch by id
app.get("/api/v1/books/:bookId", async (req, res) => {
  try {
    const book = await Book.findById(req.params.bookId);
    res.status(200).json(book);
  } catch (err) {
    res.status(500).json({
      error: err.message,
    });
  }
});

//Delete Book
app.delete("/api/v1/books/:bookId", async (req, res) => {
  try {
    await Book.findByIdAndDelete(req.params.bookId);
    res.status(200).json({ message: "Book deleted successfully" });
  } catch (err) {
    res.status(500).json({
      error: err.message,
    });
  }
});

app.listen(PORT, console.log(`Server is running on the port...${PORT}`));
